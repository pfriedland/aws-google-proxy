---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation VPC template'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Availability Zones"
        Parameters: 
          - Subnet1AZ
          - Subnet2AZ
          - Subnet3AZ
      - 
        Label: 
          default: "ECS Base Configuration"
        Parameters: 
          - Cpu
          - Memory
          - Image

      -
        Label:
          default: "ECS Auto-Scaling Configuration"
        Parameters:
          - DesiredEcsServiceCount
          - MinEcsServiceCount
          - MaxEcsServiceCount
          - EcsServiceCpuTargetValue


    ParameterLabels:
      Subnet1AZ: 
        Default: Availability Zone One 

Parameters:

  Name:
    Type: String
    Default: google-proxy
    Description: Resource tag name assigned to created resources

  Cpu:
    Type: Number
    Default: 256
    MinValue: 256
    MaxValue: 4096
    Description: Valid ECS Fargate CPU capacity units of varying increments

  Memory:
    Type: Number
    Default: 512
    MinValue: 512
    MaxValue: 30720
    Description: Valid ECS Fargate Memory capacity increments of 1GB

  Image:
    Type: String
    Default: docker.io/wattage/google-proxy
    Description: Docker image URL

  DesiredEcsServiceCount:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 6
    Description: Desired number of running containers

  MinEcsServiceCount:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 6
    Description: Minimum number of running containers

  MaxEcsServiceCount:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 6
    Description: Maximum number of running containers


  EcsServiceCpuTargetValue:
    Type: Number
    Default: 32
    MinValue: 32
    MaxValue: 4096
    Description: The number of CPU units at which a auto-scale event occurs


  Subnet1AZ:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Default: us-east-1a
    Description: Select Three Unique Availability Zones



Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.75.0.0/22
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: google-proxy:name
        Value: !Ref Name

  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:

      #AvailabilityZone: String
      CidrBlock: 10.75.0.0/24

      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      AvailabilityZone:
          !Select 
            - 0
            - !Ref Subnet1AZ          
      Tags:
      - Key: google-proxy:name
        Value: !Ref Name

  Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: 10.75.1.0/24

      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC     
      AvailabilityZone:
          !Select 
            - 1
            - !Ref Subnet1AZ
      Tags:
      - Key: google-proxy:name
        Value: !Ref Name             

  Subnet3:
    Type: "AWS::EC2::Subnet"
    Properties:

      CidrBlock: 10.75.2.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC    
      AvailabilityZone:
          !Select 
            - 2
            - !Ref Subnet1AZ          
      Tags:
      - Key: google-proxy:name
        Value: !Ref Name

  Subnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: RouteTable

  Subnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable

  Subnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet3
      RouteTableId:
        Ref: RouteTable


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: google-proxy:name
        Value: !Ref Name


  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        VpcId:
            Ref: VPC
        InternetGatewayId:
            Ref: InternetGateway   
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
      - Key: google-proxy:name
        Value: !Ref Name


  RouteIGW:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
        Ref: InternetGateway
      RouteTableId: 
        Ref: RouteTable



  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4

      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroup
      Type: application
      Subnets: 
      - !Ref Subnet1
      - !Ref Subnet2
      - !Ref Subnet3
      Tags: 
        - 
          Key: "google-proxy:name"
          Value: !Ref Name
          

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

    Properties:
      Matcher:
        HttpCode: 200-399
      VpcId: 
        Ref: VPC
      Protocol: HTTP
      Port: 8080
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'   
      TargetType: ip   
      Tags: 
        - 
          Key: "google-proxy:name"
          Value: !Ref Name


  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener

    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      Protocol:  HTTP
      Port: 8080
      LoadBalancerArn:
        Ref: LoadBalancer



  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Application LoadBalancer
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0 


  Cluster:
    Type: AWS::ECS::Cluster



  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'


  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ["application-autoscaling:*", "cloudwatch:DescribeAlarms", "cloudwatch:PutMetricAlarm",
              "ecs:DescribeServices", "ecs:UpdateService"]
            Resource: "*"




  # create a log group named for the EcsTaskDefinition in this template
  EcsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: 
        !Join
          - ""
          - - "/aws/ecs/"
            - !Ref Name
      RetentionInDays: 7

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:

      ContainerDefinitions:
        - 
          Cpu: !Ref Cpu
          Essential: True
          Image: !Ref Image
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-stream-prefix: !Ref Name
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref EcsLogGroup

          MemoryReservation: !Ref Memory           
          Name: !Ref Name
          PortMappings:
            -
              ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: !Ref Cpu
      ExecutionRoleArn: !Ref ECSServiceRole
      Family: !Ref Name
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE

  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
      - TargetGroup
      - LoadBalancer
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: !Ref DesiredEcsServiceCount
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: !Ref Name
        ContainerPort: 8080
        TargetGroupArn: !Ref TargetGroup 
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
            - !Ref Subnet3

      TaskDefinition: !Ref EcsTaskDefinition


  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxEcsServiceCount
      MinCapacity: !Ref MinEcsServiceCount
      ResourceId: !Join ["/", [service, !Ref "Cluster", !GetAtt [EcsService, Name]]]
      RoleARN: !GetAtt [ AutoScalingRole, Arn ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ProxyScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 120
        ScaleOutCooldown: 120
        TargetValue: !Ref EcsServiceCpuTargetValue

Outputs:
  LoadBalancerUrl:
    Description: Load Balancer Endpoint URL
    Value:
      !Join
        - ""
        - - "http://"
          - Fn::GetAtt:
            - LoadBalancer
            - DNSName
          - ":8080/hello%20world"
    
